<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://vast.io/blog</id>
    <title>VAST Blog</title>
    <updated>2022-07-07T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://vast.io/blog"/>
    <subtitle>VAST Blog</subtitle>
    <icon>https://vast.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[VAST v2.1]]></title>
        <id>/vast-v2.1</id>
        <link href="https://vast.io/blog/vast-v2.1"/>
        <updated>2022-07-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[VAST v2.1 - Tune VAST Databases]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/tenzir/vast/releases/tag/v2.1.0" target="_blank" rel="noopener noreferrer">VAST v2.1</a> is out! This release comes with a particular
focus on performance and reducing the size of VAST databases. It brings a new
utility for optimizing databases in production, allowing existing deployments to
take full advantage of the improvements after upgrading.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-project-site">New Project Site<a class="hash-link" href="#new-project-site" title="Direct link to heading">​</a></h2><p>VAST has new project site: <a href="https://vast.io" target="_blank" rel="noopener noreferrer">vast.io</a>. We ported all
documentation from <code>https://docs.tenzir.com</code>, added a lot of new content, and
restructured the reading experience along the user journey.</p><p>You can find the Threat Bus documentation in <a href="/docs/use-vast/integrate/threatbus">Use VAST → Integrate → Threat
Bus</a>. Threat Bus is now officially in
maintainance mode: we are only supporting existing features with bugfixes. That
said, Threat Bus will resurface in a new shape with its existing functionality
integrated into VAST itself. Stay tuned.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="performance-improvements">Performance Improvements<a class="hash-link" href="#performance-improvements" title="Direct link to heading">​</a></h2><p>VAST now compresses data with <a href="http://www.zstd.net" target="_blank" rel="noopener noreferrer">Zstd</a>. The default
configuration achieves over 2x space savings. When transferring data between
client and server processes, compression reduces the amount of transferred data
by up to 5x.</p><p>Additionally, VAST now compresses on-disk indexes with Zstd, resulting in a
50-80% size reduction depending on the type of indexes used.</p><p>This allowed us to increase the default partition size from 1,048,576 to
4,194,304 events<sup id="fnref-1-11be5a"><a href="#fn-1-11be5a" class="footnote-ref">1</a></sup>, and the default number of events in a single batch from 1,024
to 65,536, resulting in a massive performance increase at the cost of a ~20%
larger memory footprint at peak loads. Use the option <code>vast.max-partition-size</code>
to tune this space-time tradeoff.</p><p>To benchmark this, we used <a href="https://github.com/satta/speeve" target="_blank" rel="noopener noreferrer"><code>speeve</code></a> to generate 20 EVE JSON files
containing 8,388,608 events each<sup id="fnref-2-11be5a"><a href="#fn-2-11be5a" class="footnote-ref">2</a></sup>. We spawned a VAST server process and ran
20 VAST client processes in parallel, with one process per file.</p><p>We observed a reduction of <strong>up to 73%</strong> of disk space utilization:</p><p><img loading="lazy" alt="Database Size" src="/assets/images/storage-light-cdbfe9d3c7df930476bfdabb5e5f4df8.png#gh-light-mode-only" width="3000" height="2100" class="img_ev3q">
<img loading="lazy" alt="Database Size" src="/assets/images/storage-dark-701aea7c53efb6a69eeb91d2903dbe29.png#gh-dark-mode-only" width="3000" height="2100" class="img_ev3q"></p><p>In addition, we were able to scale the ingest rate by almost <strong>6x</strong> due to the
higher batch size and the reduced memory usage per batch:</p><p><img loading="lazy" alt="Ingest Rate" src="/assets/images/rate-light-0c19006b81ccac4f390f70ba73d0072a.png#gh-light-mode-only" width="3000" height="2100" class="img_ev3q">
<img loading="lazy" alt="Ingest Rate" src="/assets/images/rate-dark-026fc75f7f0a93ae2734813a1c870feb.png#gh-dark-mode-only" width="3000" height="2100" class="img_ev3q"></p><p>The table below summaries the benchmarks:</p><table><thead><tr><th align="right"></th><th align="left">VAST v2.0</th><th align="left">VAST v2.1</th><th align="left">Change</th></tr></thead><tbody><tr><td align="right">Ingest Duration</td><td align="left">1,650 s</td><td align="left">242 s</td><td align="left">-85.3%</td></tr><tr><td align="right">Ingest Rate</td><td align="left">101,680 events/s</td><td align="left">693,273 events/s</td><td align="left">+581.8%</td></tr><tr><td align="right">Index Size</td><td align="left">14,791 MiB</td><td align="left">5,721 MiB</td><td align="left">-61.3%</td></tr><tr><td align="right">Store Size</td><td align="left">37,656 MiB</td><td align="left">8,491 MiB</td><td align="left">-77.5%</td></tr><tr><td align="right">Database Size</td><td align="left">52,446 MiB</td><td align="left">14,212 MiB</td><td align="left">-72.9%</td></tr></tbody></table><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>Compressed Filesystems</div><div class="admonitionContent_S0QG"><p>The above benchmarks ran on filesystems without compression. We expect the gain
from compression to be smaller when using compressed filesystems like
<a href="https://btrfs.wiki.kernel.org/index.php/Main_Page" target="_blank" rel="noopener noreferrer"><code>btrfs</code></a>.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="rebuild-vast-databases">Rebuild VAST Databases<a class="hash-link" href="#rebuild-vast-databases" title="Direct link to heading">​</a></h2><p>The new changes to VAST's internal data format only apply to newly ingested
data. To retrofit changes, we introduce a new <code>rebuild</code> command with this
release. A rebuild effectively re-ingests events from existing partitions and
atomically replaces them with partitions of the new format.</p><p>This makes it possible to upgrade persistent state to a newer version, or
recreate persistent state after changing configuration parameters, e.g.,
switching from the Feather to the Parquet store backend (that will land in
v2.2). Rebuilding partitions also recreates their sparse indexes that
accellerate query execution. The process takes place asynchronously in the
background.</p><p>We recommend running <code>vast rebuild</code> to upgrade your VAST v1.x partitions to VAST
v2.x partitions to take advantage of the new compression and an improved
internal representation.</p><p>This is how you run it:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">vast rebuild </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--all</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--undersized</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--parallel</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">number</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">expression</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>A rebuild is not only useful when upgrading outdated partitions, but also when
changing parameters of up-to-date partitions. Use the <code>--all</code> flag to extend a
rebuild operation to <em>all</em> partitions. (Internally, VAST versions the partition
state via FlatBuffers. An outdated partition is one whose version number is not
the newest.)</p><p>The <code>--undersized</code> flag causes VAST to only rebuild partitions that are under
the configured partition size limit <code>vast.max-partition-size</code>.</p><p>The <code>--parallel</code> options is a performance tuning knob. The parallelism level
controls how many sets of partitions to rebuild in parallel. This value defaults
to 1 to limit the CPU and memory requirements of the rebuilding process, which
grow linearly with the selected parallelism level.</p><p>An optional expression allows for restricting the set of partitions to rebuild.
VAST performs a catalog lookup with the expression to identify the set of
candidate partitions. This process may yield false positives, as with regular
queries, which may cause unaffected partitions to undergo a rebuild. For
example, to rebuild outdated partitions containing <code>suricata.flow</code> events
older than 2 weeks, run the following command:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">vast rebuild </span><span class="token string" style="color:#e3116c">'#type == "suricata.flow" &amp;&amp; #import_time &lt; 2 weeks ago'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="footnotes"><hr><ol><li id="fn-1-11be5a">VAST v2.0 failed to write its partitions to disk with the defaults for
v2.1 because the on-disk size exceeded the maximum possible size of a
FlatBuffers table, which VAST internally uses to have an open standard for its
persistent state.<a href="#fnref-1-11be5a" class="footnote-backref">↩</a></li><li id="fn-2-11be5a">This resulted in 167,772,160 events, with a total of 200'917'930 unique
values with a schema distribution of 80.74% <code>suricata.flow</code>, 7.85%
<code>suricata.dns</code>, 5.35% <code>suricata.http</code>, 4.57% <code>suricata.fileinfo</code>, 1.04%
<code>suricata.tls</code>, 0.41% <code>suricata.ftp</code>, and 0.04% <code>suricata.smtp</code>.<a href="#fnref-2-11be5a" class="footnote-backref">↩</a></li></ol></div>]]></content>
        <author>
            <name>Dominik Lohmann</name>
            <email>dominik@tenzir.com</email>
            <uri>https://github.com/dominiklohmann</uri>
        </author>
        <category label="release" term="release"/>
        <category label="performance" term="performance"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Arrow as Platform for Security Data Engineering]]></title>
        <id>/apache-arrow-as-platform-for-security-data-engineering</id>
        <link href="https://vast.io/blog/apache-arrow-as-platform-for-security-data-engineering"/>
        <updated>2022-06-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How VAST leverages Apache Arrow for Security Data Engineering]]></summary>
        <content type="html"><![CDATA[<p>VAST bets on <a href="https://arrow.apache.org" target="_blank" rel="noopener noreferrer">Apache Arrow</a> as the open interface to structured data. By
"bet," we mean that VAST does not work without Arrow. And we are not alone.
Influx's <a href="https://github.com/influxdata/influxdb_iox" target="_blank" rel="noopener noreferrer">IOx</a>, DataDog's <a href="https://www.datadoghq.com/blog/engineering/introducing-husky/" target="_blank" rel="noopener noreferrer">Husky</a>, Anyscale's <a href="https://github.com/ray-project/ray" target="_blank" rel="noopener noreferrer">Ray</a>,
<a href="https://github.com/tensorbase/tensorbase" target="_blank" rel="noopener noreferrer">TensorBase</a>, and <a href="https://arrow.apache.org/powered_by/" target="_blank" rel="noopener noreferrer">others</a> committed themselves to
making Arrow a corner stone of their system architecture. For us, Arrow was not
always a required dependency. We shifted to a tighter integration over the years
as the Arrow ecosystem matured. In this blog post we explain our journey of
becoming an Arrow-native engine.</p><p>Today, the need to bring advanced security analytics and data engineering
together is stronger than ever, but there is a huge gap between the two fields.
We see Arrow as the vehicle to close this gap, allowing us developers to
practice <em>security data engineering</em> to make security analytics easy for users.
That is, the experience should allow experts to interact with the data in the
security domain, end-to-end without context switching. To achieve this, we began
our journey with VAST by developing a data model for structured security
telemetry. Having worked for a decade with the <a href="https://zeek.org" target="_blank" rel="noopener noreferrer">Zeek</a> (fka. Bro) network
security monitor, we understood the value of having first-class support for
domain-specific entities (e.g., native representation of IPv4 and IPv6
addresses) and type-specific operations (e.g., the ability to perform top-k
prefix search to answer subnet membership queries). In addition, the ability to
embed domain semantics with user-defined types (e.g., IP addresses, subnets, and
URLs) was central to expressing complex relationships to develop effective
analytical models. It was clear that we needed the domain model deep in the core
of the system to successfully support security analytics.</p><p>After having identified the data model requirements, the question of
representation came next. At first, we unified the internal representation with
a row-oriented representation using <a href="https://msgpack.org/index.html" target="_blank" rel="noopener noreferrer">MsgPack</a>, which comes with a
mechanism for adding custom types. The assumption was that a row-based data
representation more closely matches typical event data (e.g., JSONL) and
therefore allows for much higher processing rates. Moreover, early use cases of
VAST were limited to interactive, multi-dimensional search to extract a subset
of <em>entire</em> records, spread over a longitudinal archive of data. The
row-oriented encoding worked well for this.</p><p>But as security operations were maturing, requirements extended to analytical
processing of structured data, making a columnar format increasingly beneficial.
After having witnessed first-hand the early commitment of <a href="https://github.com/ray-project/ray" target="_blank" rel="noopener noreferrer">Ray</a> to Arrow,
we started using Arrow as optional dependency as additional column-oriented
encoding. We abstracted a batch of data encoding-independent behind a "table
slice":</p><p><img loading="lazy" alt="MsgPack &amp;amp; Arrow" src="/assets/images/msgpack-arrow.light-d4fe0d3d4c5b14408fcf7b274a917c51.png#gh-light-mode-only" width="2000" height="560" class="img_ev3q">
<img loading="lazy" alt="MsgPack &amp;amp; Arrow" src="/assets/images/msgpack-arrow.dark-d7a78dcf71589d187d68cbefcc9f2c72.png#gh-dark-mode-only" width="2000" height="560" class="img_ev3q"></p><p>Hiding the concrete encoding behind a cell-based access interface worked for
low-volume use cases, but backfired as we scaled up and slowed us down
substantially in development. We needed to make a choice. This is where timing
was right: our perception of the rapidly evolving Arrow ecosystem changed.
Arrow-based runtimes were mushrooming all over the place. Nowadays it requires
only a few lines of code to integrate Arrow data into the central logic of
applications. We realized that the primary value proposition of Arrow is to
<em>make data interoperability easy</em>.</p><p>But data interoperability is only a sufficient condition for enabling
sustainable security analytics. The differentiating value of a <em>security</em> data
platform is support for the <em>security</em> domain. This is where Arrow's <a href="https://arrow.apache.org/docs/format/Columnar.html#extension-types" target="_blank" rel="noopener noreferrer">extension
types</a> come into play. They add <em>semantics</em> to otherwise
generic types, e.g., by telling the user "this is a transport-layer port" and
not just a 16-bit unsigned integer, or "this is a connection 4-tuple to
represent a network flow" instead of "this is a record with 4 fields of type
string and unsigned integer". Extension types are composable and allow for
creating a rich typing layer with meaningful domain objects on top of a
standardized data representation. Since they are embedded in the data, they do
not have to be made available out-of-band when crossing the boundaries of
different tools. Now we have self-describing security data.</p><p>Interoperability plus support for a domain-specific data model makes Arrow a
solid <em>data plane</em>. It turns out that Arrow is much more than a standardized
data representation. Arrow also comes with bag of tools for working with the
standardized data. In the diagram below, we show the various Arrow pieces that
power the architecture of VAST:</p><p><img loading="lazy" alt="Arrow Data Plane" src="/assets/images/arrow-data-plane.light-d64b2a653495efdbfb165bf6e993e87d.png#gh-light-mode-only" width="1600" height="1183" class="img_ev3q">
<img loading="lazy" alt="Arrow Data Plane" src="/assets/images/arrow-data-plane.dark-1e38a9e966186c217a4a6963cae909ec.png#gh-dark-mode-only" width="1600" height="1183" class="img_ev3q"></p><p>In the center we have the Arrow data plane that powers other parts of the
system. Green elements highlight Arrow building blocks that we use today, and
orange pieces elements we plan to use in the future. There are several aspects
worth pointing out:</p><ol><li><p><strong>Unified Data Plane</strong>: When users ingest data into VAST, the
parsing process converts the native data into Arrow. Similarly, a
conversation boundary exists when data leaves the system, e.g., when a user
wants a query result shown in JSON, CSV, or some custom format. Source and
sink data formats are <a href="/docs/understand-vast/architecture/plugins">exchangeable
plugins</a>.</p></li><li><p><strong>Read/Write Path Separation</strong>: one design goal of VAST is a strict
separation of read and write path, in order to scale them independently. The
write path follows a horizontally scalable architecture where builders (one per
schema) turn the in-memory record batches into a persistent representation.
VAST currently has support for Parquet and Feather.</p></li><li><p><strong>Pluggable Query Engine</strong>: VAST has live/continuous queries that simply run
over the stream of incoming data, and historical queries that operate on
persistent data. The harboring execution engine is something we are about to
make pluggable. The reason is that VAST runs in extremely different
environments, from cluster to edge. Query engines are usually optimized for a
specific use case, so why not use the best engine for the job at hand? Arrow
makes this possible. <a href="https://duckdb.org/" target="_blank" rel="noopener noreferrer">DuckDB</a> and <a href="https://arrow.apache.org/datafusion/" target="_blank" rel="noopener noreferrer">DataFusion</a> are great
example of embeddable query engines.</p></li><li><p><strong>Unified Control Plane</strong>: to realize a pluggable query engine, we also need
a standardized control plane. This is where <a href="https://substrait.io/" target="_blank" rel="noopener noreferrer">Substrait</a> and
<a href="https://arrow.apache.org/docs/format/Flight.html" target="_blank" rel="noopener noreferrer">Flight</a> come into play. Flight for communication and Substrait as
canonical query representation. We already experimented with Substrait,
converting VAST queries into a logical query plan. In fact, VAST has a "query
language" plugin to make it possible to translate security content. (For
example, our <a href="/docs/understand-vast/query-language/frontends/sigma">Sigma plugin</a> translates <a href="https://github.com/SigmaHQ/sigma" target="_blank" rel="noopener noreferrer">Sigma rules</a>
into VAST queries.) In short: Substrait is to the control plane what Arrow is
to the data plane. Both are needed to modularize the concept of a query
engine.</p></li></ol><p>Making our own query engine more suitable for analytical workloads has
received less attention in the past, as we prioritized high-performance data
acquisition, low-latency search, in-stream matching using <a href="https://arrow.apache.org/docs/cpp/compute.html" target="_blank" rel="noopener noreferrer">Compute</a>,
and expressiveness of the underlying domain data model. We did so because VAST
must run robustly in production on numerous appliances all over the world in a
security service provider setting, with confined processing and storage where
efficiency is key.</p><p>Moving forward, we are excited to bring more analytical horse power to the
system, while opening up the arena for third-party engines. With the bag of
tools from the Arrow ecosystem, plus all other embeddable Arrow engines that are
emerging, we have a modular architecture to can cover a very wide spectrum of
use cases.</p>]]></content>
        <author>
            <name>Matthias Vallentin</name>
            <email>matthias@tenzir.com</email>
            <uri>https://github.com/mavam</uri>
        </author>
        <category label="architecture" term="architecture"/>
        <category label="arrow" term="arrow"/>
        <category label="performance" term="performance"/>
        <category label="query" term="query"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[VAST v2.0]]></title>
        <id>/vast-v2.0</id>
        <link href="https://vast.io/blog/vast-v2.0"/>
        <updated>2022-05-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[VAST v2.0 - Smarter Query Scheduling & Tunable Filters]]></summary>
        <content type="html"><![CDATA[<p>Dear community, we are excited to announce <a href="https://github.com/tenzir/vast/releases/tag/v2.0.0" target="_blank" rel="noopener noreferrer">VAST v2.0</a>,
bringing faster execution of bulk-submitted queries, improved tunability of
index structures, and new configurability through environment variables.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="query-scheduling">Query Scheduling<a class="hash-link" href="#query-scheduling" title="Direct link to heading">​</a></h2><p>VAST is now more intelligent in how it schedules queries.</p><p>When a query arrives at the VAST server, VAST first goes to the catalog which
returns a set of on-disk candidate partitions that the query may be applicable
to. Previous versions of VAST simply iterated through the available queries as
they came in, loading partition by partition to extract events. Due to memory
constraints, VAST is only able to keep some partitions in memory, which causes
frequent loading and unloading of the same partitions for queries that access
the same data. Now, VAST loads partitions depending on how many queries they are
relevant for and evaluates all ongoing queries for one partition at a time.</p><p>Additionally, VAST now partitions the data for each schema separately, moving
away from partitions that contain events of multiple schemas. This helps with
common access patterns and speeds up queries restricted to a single schema.</p><p>The numbers speak for themselves:</p><p><img loading="lazy" alt="Benchmarks" src="/assets/images/scheduler-light-a41d3be0b89de1169e9d96fd5d927da1.png#gh-light-mode-only" width="3000" height="2100" class="img_ev3q">
<img loading="lazy" alt="Benchmarks" src="/assets/images/scheduler-dark-494294caab31783eaf51c54055597463.png#gh-dark-mode-only" width="3000" height="2100" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="updates-to-aging-compaction-and-the-disk-monitor">Updates to Aging, Compaction, and the Disk Monitor<a class="hash-link" href="#updates-to-aging-compaction-and-the-disk-monitor" title="Direct link to heading">​</a></h2><p>VAST v1.0 deprecated the experimental aging feature. Given popular demand we've
decided to un-deprecate it and to actually implement it on top of the same
building blocks the new compaction mechanism uses, which means that it is now
fully working and no longer considered experimental.</p><p>The compaction plugin is now able to apply general time-based compactions that
are not restricted to a specific set of types. This makes it possible for
operators to implement rules like "delete all data after 1 week", without having
to list all possible data types that may occur.</p><p>Some smaller interface changes improve the observability of the compactor for
operators: The  <code>vast compaction status</code> command prints the current compaction
status, and the <code>vast compaction list</code> command now lists all configured
compaction rules of the VAST node.</p><p>Additionally, we've improved overall stability and fault tolerance improvements
surrounding the disk monitor and compaction features.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="fine-tuned-catalog-configuration">Fine-tuned Catalog Configuration<a class="hash-link" href="#fine-tuned-catalog-configuration" title="Direct link to heading">​</a></h2><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>Advanced Users</div><div class="admonitionContent_S0QG"><p>This section is for advanced users only.</p></div></div><p>The catalog manages partition metadata and is responsible for deciding whether a
partition qualifies for a certain query. It does so by maintaining sketch data
structures (e.g., Bloom filters, summary statistics) for each partition.
Sketches are highly space-efficient at the cost of being probabilistic and
yielding false positives.</p><p>Due to this characteristic, sketches can grow sublinear: doubling the number of
events in a sketch does not lead to a doubling of the memory requirement.
Because the catalog must be traversed in full for a given query it needs to be
maintained in active memory to provide high responsiveness.</p><p>A false positive can have substantial impact on the query latency by
materializing irrelevant partitions, which involves unnecessary I/O. Based on
the cost of I/O, this penalty may be substantial. Conversely, reducing the false
positive rate increases the memory consumption, leading to a higher resident set
size and larger RAM requirements.</p><p>You can control this space-time trade-off in the configuration section
<code>vast.index</code> by specifying index rules. Each rule corresponds to one sketch and
consists of the following components:</p><p><code>targets</code>: a list of extractors to describe the set of fields whose values to
add to the sketch. <code>fp-rate</code>: an optional value to control the false-positive
rate of the sketch.</p><p>VAST does not create field-level sketches unless a dedicated rule with a
matching target configuration exists. Here's an example:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">vast</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">index</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">rules</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">targets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic"># field synopses: need to specify fully qualified field name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> suricata.http.http.url</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">fp-rate</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.005</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">targets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">addr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">fp-rate</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This configuration includes two rules (= two sketches), where the first rule
includes a field extractor and the second a type extractor. The first rule
applies to a single field, <code>suricata.http.http.url</code>, and has a false-positive
rate of 0.5%. The second rule creates one sketch for all fields of type <code>addr</code>
that has a false-positive rate of 10%.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-vast-with-environment-variables">Configuring VAST with Environment Variables<a class="hash-link" href="#configuring-vast-with-environment-variables" title="Direct link to heading">​</a></h2><p>VAST now offers an additional configuration path besides editing YAML
configuration files and providing command line arguments: <em>setting environment
variables</em>. This enables a convenient configuration experience when using
container runtimes, such as Docker, where the other two configuration paths have
a mediocre UX at best:</p><p>The container entry point is limited to adding command line arguments, where not
all options may be set. For Docker Compose and Kubernetes, it is often not
trivially possible to even add command line arguments.</p><p>Providing a manual configuration file is a heavy-weight action, because it
requires (1) generating a potentially templated configuration file, and (2)
mounting that file into a location where VAST would read it.</p><p>An environment variable has the form <code>KEY=VALUE</code>. VAST processes only
environment variables having the form <code>VAST_{KEY}=VALUE</code>. For example,
<code>VAST_ENDPOINT=1.2.3.4</code> translates to the command line option
<code>--endpoint=1.2.3.4</code> and YAML configuration <code>vast.endpoint: 1.2.3.4</code>.</p><p>Regarding precedence, environment variables override configuration file
settings, and command line arguments override environment variables. Please
consult the <a href="/docs/setup-vast/configure#environment-variables">documentation</a>
for a more detailed explanation of how to specify keys and values.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="vlan-tag-extraction-and-better-packet-decapsulation">VLAN Tag Extraction and Better Packet Decapsulation<a class="hash-link" href="#vlan-tag-extraction-and-better-packet-decapsulation" title="Direct link to heading">​</a></h2><p>VAST now extracts <a href="https://en.wikipedia.org/wiki/IEEE_802.1Q" target="_blank" rel="noopener noreferrer">802.1Q VLAN tags</a>
from packets, making it possible to filter packets based on VLAN ID. The packet
schema includes a new nested record <code>vlan</code> with two fields: <code>outer</code> and <code>inner</code>
to represent the respective VLAN ID. For example, you can generate PCAP traces
of packets based on VLAN IDs as follows:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">vast </span><span class="token builtin class-name">export</span><span class="token plain"> pcap </span><span class="token string" style="color:#e3116c">'vlan.outer &gt; 0 || vlan.inner in [1, 2, 3]'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> tcpdump -r - -nl</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>VLAN tags occur in many variations, and VAST extracts them in case of
single-tagging and  <a href="https://en.wikipedia.org/wiki/IEEE_802.1ad" target="_blank" rel="noopener noreferrer">QinQ
double-tagging</a>. Consult the <a href="/docs/use-vast/ingest#pcap">PCAP
documentation</a> for details on this feature.</p><p>Internally, the packet decapsulation logic has been rewritten to follow a
layered approach: frames, packets, and segments are the building blocks. The
plan is to reuse this architecture when switching to kernel-bypass packet
acquisition using DPDK. If you would like to see more work on the front of
high-performance packet recording, please reach out.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="breaking-changes">Breaking Changes<a class="hash-link" href="#breaking-changes" title="Direct link to heading">​</a></h2><p>The <code>--verbosity</code> command-line option is now called <code>--console-verbosity</code>. The
shorthand options <code>-v</code>, <code>-vv</code>, <code>-vvv</code>, <code>-q</code>, <code>-qq</code>, and  <code>-qqq</code>  are unchanged.
This aligns the command-line option with the configuration option
<code>vast.console-verbosity</code>, and disambiguates from the <code>vast.file-verbosity</code>
option.</p><p>The <em>Meta Index</em> is now called the <em>Catalog</em>. This affects multiple status and
metrics keys. We plan to extend the functionality of the Catalog in a future
release, turning it into a more powerful first instance for lookups.</p><p>Transform steps that add or modify columns now add or modify the columns
in-place rather than at the end, preserving the nesting structure of the
original data.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="changes-for-developers">Changes for Developers<a class="hash-link" href="#changes-for-developers" title="Direct link to heading">​</a></h2><p>The <code>vast get</code> command no longer exists. The command allowed for retrieving
events by their internal unique ID, which we are looking to remove entirely in
the future.</p><p>Changes to the internal data representation of VAST require all transform step
plugins to be updated. The output format of the vast export arrow command
changed for the address, subnet, pattern, and enumeration types, which are now
modeled as <a href="https://arrow.apache.org/docs/format/Columnar.html#extension-types" target="_blank" rel="noopener noreferrer">Arrow Extension
Types</a>. The
record type is no longer flattened. The mapping of VAST types to Apache Arrow
data types  is now considered stable.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="smaller-things">Smaller Things<a class="hash-link" href="#smaller-things" title="Direct link to heading">​</a></h2><ul><li>VAST client commands now start much faster and use less memory.</li><li>The <code>vast count --estimate '&lt;query&gt;'</code> feature no longer unnecessarily causes
stores to load from disk, resulting in major speedups for larger databases and
broad queries.</li><li>The <a href="https://github.com/tenzir/vast" target="_blank" rel="noopener noreferrer">tenzir/vast</a> repository now contains
experimental Terraform scripts for deploying VAST to AWS Fargate and Lambda.</li></ul>]]></content>
        <author>
            <name>Dominik Lohmann</name>
            <email>dominik@tenzir.com</email>
            <uri>https://github.com/dominiklohmann</uri>
        </author>
        <category label="release" term="release"/>
        <category label="compaction" term="compaction"/>
        <category label="performance" term="performance"/>
        <category label="pcap" term="pcap"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[VAST v1.1.2]]></title>
        <id>/vast-v1.1.2</id>
        <link href="https://vast.io/blog/vast-v1.1.2"/>
        <updated>2022-03-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[VAST v1.1.2 - Compaction & Query Language Frontends]]></summary>
        <content type="html"><![CDATA[<p>Dear community, we are happy to announce the release of <a href="https://github.com/tenzir/vast/releases/tag/v1.1.2" target="_blank" rel="noopener noreferrer">VAST
v1.1.2</a>, the latest release
on the VAST v1.1 series. This release contains a fix for a race condition that
could lead to VAST eventually becoming unresponsive to queries in large
deployments.</p><p>Fixed a race condition that would cause queries to become stuck when an exporter
would time out during the meta index lookup.
<a href="https://github.com/tenzir/vast/pull/2165" target="_blank" rel="noopener noreferrer">#2165</a></p>]]></content>
        <author>
            <name>Benno Evers</name>
            <email>benno@tenzir.com</email>
            <uri>https://github.com/lava</uri>
        </author>
        <category label="release" term="release"/>
        <category label="compaction" term="compaction"/>
        <category label="query" term="query"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[VAST v1.1.1]]></title>
        <id>/vast-v1.1.1</id>
        <link href="https://vast.io/blog/vast-v1.1.1"/>
        <updated>2022-03-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[VAST v1.1.1 - Compaction & Query Language Frontends]]></summary>
        <content type="html"><![CDATA[<p>Dear community, we are excited to announce <a href="https://github.com/tenzir/vast/releases/tag/v1.1.1" target="_blank" rel="noopener noreferrer">VAST
v1.1.1</a>.</p><p>This release contains some important bug fixes on top of everything included in
the <a href="https://github.com/tenzir/vast/releases/tag/v1.1.0" target="_blank" rel="noopener noreferrer">VAST v1.1</a> release.</p><ul><li>The disk monitor now correctly continues deleting until below the low water
mark after a partition failed to delete.</li><li>We fixed a rarely occurring race condition that caused query workers to become
stuck after delivering all results until the corresponding client process
terminated.</li><li>Queries that timed out or were externally terminated while in the query
backlog that had more unhandled candidate than taste partitions no longer
permanently get stuck. This critical bug caused VAST to idle permanently on
the export path once all workers were stuck.</li></ul><p>Thanks to <a href="https://github.com/norg" target="_blank" rel="noopener noreferrer">@norg</a> for reporting the issues.</p>]]></content>
        <author>
            <name>Dominik Lohmann</name>
            <email>dominik@tenzir.com</email>
            <uri>https://github.com/dominiklohmann</uri>
        </author>
        <category label="release" term="release"/>
        <category label="compaction" term="compaction"/>
        <category label="query" term="query"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[VAST v1.1]]></title>
        <id>/vast-v1.1</id>
        <link href="https://vast.io/blog/vast-v1.1"/>
        <updated>2022-03-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[VAST v1.1 - Compaction & Query Language Frontends]]></summary>
        <content type="html"><![CDATA[<p>Dear community, we are excited to announce <a href="https://github.com/tenzir/vast/releases/tag/v1.1.0" target="_blank" rel="noopener noreferrer">VAST v1.1</a>,
which ships with exciting new features: <em>query language plugins</em> to exchange the
query expression frontend, and <em>compaction</em> as a mechanism for expressing
fine-grained data retention policies and gradually aging out data instead of
simply deleting it.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="query-language-plugins">Query Language Plugins<a class="hash-link" href="#query-language-plugins" title="Direct link to heading">​</a></h2><p>VAST features <a href="https://vast.io/docs/understand-vast/architecture/plugins#query-language" target="_blank" rel="noopener noreferrer">a new query language plugin
type</a>
that makes it possible to exchange the querying frontend, that is, replace the
language in which the user writes queries. This makes it easier to integrate
VAST into specific domains without compromising the policy-neutral system core.</p><p>The first instance of the query language plugin is the <a href="https://github.com/tenzir/vast/tree/master/plugins/sigma" target="_blank" rel="noopener noreferrer"><code>sigma</code>
plugin</a>, which make it
possible to pass <a href="https://vast.io/docs/understand-vast/query-language/frontends/sigma" target="_blank" rel="noopener noreferrer">Sigma
rules</a> as
input instead of a standard VAST query expression. Prior to this plugin, VAST
attempted to parse a query as Sigma rule first, and if that failed, tried to
parse it as a VAST expression. The behavior changed in that VAST now always
tries to interpret user input as VAST expression, and if that fails, goes
through all other loaded query language plugins.</p><p>Moving forward, we will make it easier for integrators to BYO query language and
leverage VAST as an execution engine. We have already
<a href="https://github.com/tenzir/vast/pull/2075" target="_blank" rel="noopener noreferrer">experimented</a> with
<a href="https://substrait.io" target="_blank" rel="noopener noreferrer">Substrait</a>, a cross-language protobuf spec for query
plans. The vision is that users can easily connect <em>any</em> query language that
compiles into Substrait, and VAST takes the query plan as binary substrait blob.
Substrait is still a very young project, but if the Arrow integration starts to
mature, it has the potential to enable very powerful types of queries without
much heavy lifting on our end. We already use the Arrow Compute API to implement
generic grouping and aggregation during compaction, which allows us to avoid
hand-roll and optimize compute kernels for standard functions.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="compaction-plugin">Compaction Plugin<a class="hash-link" href="#compaction-plugin" title="Direct link to heading">​</a></h2><p>Compaction is a feature to perform fine-grained transformation of historical
data to manage a fixed storage budget. This gives operators full control over
shrinking data gradually—both from a temporal and spatial angle:</p><p><strong>Spatial</strong>: Traditionally, reaching a storage budget triggers deletion of the
oldest (or least-recently-used) data. This is a binary decision to throw away a
subset of events. It does not differentiate the utility of data within an event.
What if you could only throw away the irrelevant parts and keep the information
that might still be useful for longitudinal investigations? What if you could
aggregate multiple events into a single one that captures valuable information?
Imagine, for example, halving the space utilization of events with network flow
information and keeping them 6 months longer; or imagine you could roll up a set
of flows into a traffic matrix that only captures who communicated with whom in
a given timeframe.</p><p>By incrementally elevating data into more space-efficient representations,
compaction gives you a much more powerful mechanism to achieve long retention
periods while working with high-volume telemetry.</p><p><strong>Temporal</strong>: data residency regulations often come with compliance policies
with maximum retention periods, e.g., data containing personal data. For
example, a policy may dictate a maximum retention of 1 week for events
containing URIs and 3 months for events containing IP addresses related to
network connections. However, these retention windows could be broadened when
pseudonomyzing or anonymizing the relevant fields.</p><p>Compaction has a policy-based approach to specify these temporal constraints in
a clear, declarative fashion.</p><p>Compaction supersedes both the disk monitor and aging, being able to cover the
entire functionality of their behaviors in a more configurable way. The disk
monitor remains unchanged and the experimental aging feature is deprecated (see
below).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="updates-to-transform-steps">Updates to Transform Steps<a class="hash-link" href="#updates-to-transform-steps" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="aggregate-step">Aggregate Step<a class="hash-link" href="#aggregate-step" title="Direct link to heading">​</a></h3><p>The new <code>aggregate</code> transform step plugin allows for reducing data with an
aggregation operation over a group of columns.</p><p>Aggregation is a two-step process of first bucketing data in groups of values,
and then executing an aggregation function that computes a single value over the
bucket. The functionality is in line with what standard execution engines offer
via "group-by" and "aggregate".</p><p>Based on how the transformation is invoked in VAST, the boundary for determining
what goes into a grouping can be a table slice (e.g., during import/export) or
an entire partition (during compaction).</p><p>How this works is best shown on example data. Consider the following events
representing flow data that contain a source IP address, a start and end
timestamp, the number of bytes per flow, a boolean flag whether there is an
associated alert, and a unique identifier.</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token property" style="color:#36acaa">"source_ip"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"10.0.0.1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"num_bytes"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">87122</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"start"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2022-02-22T10:36:40"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"end"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2022-02-22T10:36:47"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"alerted"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"unique_id"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token property" style="color:#36acaa">"source_ip"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"10.0.0.2"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"num_bytes"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">62335</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"start"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2022-02-22T10:36:43"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"end"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2022-02-22T10:36:48"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"alerted"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"unique_id"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token property" style="color:#36acaa">"source_ip"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"10.0.0.1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"num_bytes"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">640</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"start"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2022-02-22T10:36:46"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"end"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2022-02-22T10:36:47"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"alerted"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"unique_id"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token property" style="color:#36acaa">"source_ip"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"10.0.0.1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"num_bytes"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2162</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"start"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2022-02-22T10:36:49"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"end"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2022-02-22T10:36:51"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"alerted"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"unique_id"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We can now configure a transformation that groups the events by their source IP
address, takes the sum of the number of bytes, the minimum of the start
timestamp, the maximum of the end timestamp, and the disjunction of the alerted
flag. Since the unique identifier cannot be aggregated in a meaningful manner,
it  is discarded.</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">vast</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">transforms</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">example-aggregation</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">aggregate</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">group-by</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> source_ip</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">sum</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> num_bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">min</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">max</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">any</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> alerted</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>After applying the transform, the resulting events will look like this:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token property" style="color:#36acaa">"source_ip"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"10.0.0.1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"num_bytes"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">89924</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"start"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2022-02-22T10:36:40"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"end"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2022-02-02T10:36:51"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"alerted"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token property" style="color:#36acaa">"source_ip"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"10.0.0.2"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"num_bytes"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">62335</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"start"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2020-11-06T10:36:43"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"end"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2020-02-22T10:36:48"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"alerted"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Unlike the built-in transform steps, <code>aggregate</code> is a separate open-source
plugin that needs to be manually enabled in your <code>vast.yaml</code> configuration to be
usable:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">vast</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">plugins</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> aggregate</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rename-step">Rename Step<a class="hash-link" href="#rename-step" title="Direct link to heading">​</a></h3><p>The new <code>rename</code> transform step is a built-in that allows for changing the name
of the schema of data. This is particularly useful when a transformation changes
the shape of the data. E.g., an aggregated <code>suricata.flow</code> should likely be
renamed because it is of a different layout.</p><p>This is how you configure the transform step:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">rename</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">layout-names</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">from</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> suricata.flow</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">to</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> suricata.aggregated_flow</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="project-and-select-steps">Project and Select Steps<a class="hash-link" href="#project-and-select-steps" title="Direct link to heading">​</a></h3><p>The built-in <code>project</code> and <code>select</code> transform steps now drop table slices where
no columns and rows match the configuration respectively instead of leaving the
data untouched.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="deprecations">Deprecations<a class="hash-link" href="#deprecations" title="Direct link to heading">​</a></h2><p>The <code>msgpack</code> encoding no longer exists. As we integrate deeper with Apache
Arrow, the <code>arrow</code> encoding is now the only option. Configuration options for
<code>msgpack</code> will be removed in an upcoming major release. On startup, VAST now
warns if any of the deprecated options are in use.</p><p>VAST’s <em>aging</em> feature never made it out of the experimental stage: it only
erased data without updating the index correctly, leading to unnecessary lookups
due to overly large candidate sets and miscounts in the statistics. Because
time-based compaction is a superset of the aging functionality (that also
updates the index correctly), we will remove aging in a future release. VAST now
warns on startup if it’s configured to run aging.</p>]]></content>
        <author>
            <name>Dominik Lohmann</name>
            <email>dominik@tenzir.com</email>
            <uri>https://github.com/dominiklohmann</uri>
        </author>
        <category label="release" term="release"/>
        <category label="compaction" term="compaction"/>
        <category label="query" term="query"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[VAST v1.0]]></title>
        <id>/vast-v1.0</id>
        <link href="https://vast.io/blog/vast-v1.0"/>
        <updated>2022-01-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[VAST v1.0 – New Year, New Versioning Scheme]]></summary>
        <content type="html"><![CDATA[<p>We are happy to announce <a href="https://github.com/tenzir/vast/releases/tag/v1.0.0" target="_blank" rel="noopener noreferrer">VAST v1.0</a>!</p><p>This release brings a new approach to software versioning for Tenzir. We laid
out the semantics in detail in a new <a href="https://github.com/tenzir/vast/blob/v1.0.0/VERSIONING.md" target="_blank" rel="noopener noreferrer">VERSIONING</a>
document.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="query-events-based-on-their-import-time">Query events based on their import time<a class="hash-link" href="#query-events-based-on-their-import-time" title="Direct link to heading">​</a></h2><p>The new <a href="https://vast.io/docs/understand-vast/query-language/expressions#meta-extractor" target="_blank" rel="noopener noreferrer"><code>#import_time</code> extractor</a> allows for exporting
events based on the time they arrived at VAST. Most of the time, this timestamp
is not far away from the timestamp of when the event occurred, but in certain
cases the two may deviate substantially, e.g., when ingesting historical events
from several years ago.</p><p>For example, to export all Suricata alerts that arrived at VAST on New Years Eve
as JSON, run this command:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">vast </span><span class="token builtin class-name">export</span><span class="token plain"> json </span><span class="token string" style="color:#e3116c">'#type == "suricata.alert" &amp;&amp; #import_time &gt;= 2021-12-31 &amp;&amp; #import_time &lt; 2022-01-01'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This differs from the <a href="https://vast.io/docs/understand-vast/query-language/expressions#type-extractor" target="_blank" rel="noopener noreferrer"><code>:timestamp</code> type extractor</a> that
queries all events that contain a type <code>timestamp</code>, which is an alias for the
<code>time</code> type.  By convention, the <code>timestamp</code> type represents the event time
embedded in the data itself. However, the import time  is not part of the event
data itself, but rather part of metadata of every batch of events that VAST
creates.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="omit-null-fields-in-the-json-export">Omit <code>null</code> fields in the JSON export<a class="hash-link" href="#omit-null-fields-in-the-json-export" title="Direct link to heading">​</a></h2><p>VAST renders all fields defined in the schema when exporting events as JSON. A
common option for many tools that handle JSON is to skip rendering <code>null</code>
fields, and the new <code>--omit-nulls</code> option to the JSON export does exactly that.</p><p>To use it on a case-by-case basis, add this flag to any JSON export.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">vast </span><span class="token builtin class-name">export</span><span class="token plain"> json --omit-nulls </span><span class="token string" style="color:#e3116c">'&lt;query&gt;'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># This also works when attaching to a matcher.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vast matcher attach json --omit-nulls </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">matcher</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>To always enable it, add this to your <code>vast.yaml</code> configuration file:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">vast</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">import</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">omit-nulls</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="selection-and-projection-transform-steps">Selection and Projection Transform Steps<a class="hash-link" href="#selection-and-projection-transform-steps" title="Direct link to heading">​</a></h2><p>Reshaping data during import and export is a common use case that VAST now
supports. The two new built-in transform steps allow for filtering columns and
rows. Filtering columns (<em>projection</em>) takes a list of column names as input,
and filtering rows (<em>selection</em>)  works with an arbitrary query expression.</p><p>Here’s a usage example that sanitizes data leaving VAST during a query. If any
string field in an event contains the value <code>tenzir</code> or <code>secret-username</code>, VAST
will not include the event in the result set. The example below applies this
sanitization only to the events  <code>suricata.dns</code> and <code>suricata.http</code>, as defined
in the section <code>transform-triggers</code>.</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">vast</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># Specify and name our transforms, each of which are a list of configured</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># transform steps. Transform steps are plugins, enabling users to write more</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># complex transformations in native code using C++ and Apache Arrow.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">transforms</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic"># Prevent events with certain strings to be exported, e.g., "tenzir" or</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic"># "secret-username".</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token key atrule" style="color:#00a4db">remove-events-with-secrets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">select</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token key atrule" style="color:#00a4db">expression</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">':string !in ["tenzir", "secret-username"]'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># Specify whether to trigger each transform at server- or client-side, on</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># import or export, and restrict them to a list of event types.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">transform-triggers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">export</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># Apply the remove-events-with-secrets transformation server-side on</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># export to the suricata.dns and suricata.http event types.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">transform</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> remove</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">events</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">with</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">secrets</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">location</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">events</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> suricata.dns</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> suricata.http</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="threat-bus-20220127">Threat Bus 2022.01.27<a class="hash-link" href="#threat-bus-20220127" title="Direct link to heading">​</a></h2><p>Thanks to a contribution from Sascha Steinbiss
(<a href="https://github.com/satta" target="_blank" rel="noopener noreferrer">@satta</a>), Threat Bus only reports failure when
transforming a sighting context if the return code of the transforming program
indicates failure.</p><p>A small peek behind the curtain: We’re building the next generation of Threat
Bus as part of VAST. We will continue to develop and maintain Threat Bus and its
apps for the time being.</p><p>Threat Bus 2022.01.27 is available <a href="https://github.com/tenzir/threatbus/releases/tag/2022.01.27" target="_blank" rel="noopener noreferrer">👉
here</a>.</p>]]></content>
        <author>
            <name>Dominik Lohmann</name>
            <email>dominik@tenzir.com</email>
            <uri>https://github.com/dominiklohmann</uri>
        </author>
        <category label="release" term="release"/>
        <category label="transforms" term="transforms"/>
        <category label="query" term="query"/>
    </entry>
</feed>