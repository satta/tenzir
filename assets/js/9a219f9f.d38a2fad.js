"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[29468],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?o.createElement(k,a(a({ref:t},p),{},{components:n})):o.createElement(k,a({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},90053:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>f,default:()=>N,frontMatter:()=>k,metadata:()=>h,toc:()=>y});var o=n(3905),r=Object.defineProperty,i=Object.defineProperties,a=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&p(e,n,t[n]);if(l)for(var n of l(t))s.call(t,n)&&p(e,n,t[n]);return e},u=(e,t)=>i(e,a(t)),m=(e,t)=>{var n={};for(var o in e)c.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&l)for(var o of l(e))t.indexOf(o)<0&&s.call(e,o)&&(n[o]=e[o]);return n};const k={sidebar_custom_props:{connector:{loader:!0,saver:!0}}},f="tcp",h={unversionedId:"connectors/tcp",id:"version-v4.17/connectors/tcp",title:"tcp",description:"Loads bytes from a TCP or TLS connection.",source:"@site/versioned_docs/version-v4.17/connectors/tcp.md",sourceDirName:"connectors",slug:"/connectors/tcp",permalink:"/v4.17/connectors/tcp",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.17/connectors/tcp.md",tags:[],version:"v4.17",frontMatter:{sidebar_custom_props:{connector:{loader:!0,saver:!0}}},sidebar:"docsSidebar",previous:{title:"stdout",permalink:"/v4.17/connectors/stdout"},next:{title:"udp",permalink:"/v4.17/connectors/udp"}},v={},y=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"<code>&lt;endpoint&gt;</code>",id:"endpoint",level:3},{value:"<code>-c,--connect</code> (Loader)",id:"-c--connect-loader",level:3},{value:"<code>-l,--listen</code> (Saver)",id:"-l--listen-saver",level:3},{value:"<code>-o,--listen-once</code>",id:"-o--listen-once",level:3},{value:"<code>--tls</code>",id:"--tls",level:3},{value:"<code>--certfile</code>",id:"--certfile",level:3},{value:"<code>--keyfile</code>",id:"--keyfile",level:3},{value:"Examples",id:"examples",level:2}],b={toc:y},g="wrapper";function N(e){var t=e,{components:n}=t,r=m(t,["components"]);return(0,o.kt)(g,u(d(d({},b),r),{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",d({},{id:"tcp"}),"tcp"),(0,o.kt)("p",null,"Loads bytes from a TCP or TLS connection."),(0,o.kt)("h2",d({},{id:"synopsis"}),"Synopsis"),(0,o.kt)("p",null,"Loader:"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{}),"tcp [-c|--connect] [-o|--listen-once]\n    [--tls] [--certfile] [--keyfile] <endpoint>\n")),(0,o.kt)("p",null,"Saver:"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{}),"tcp [-l|--listen] [-o|--listen-once]\n    [--tls] [--certfile] [--keyfile] <endpoint>\n")),(0,o.kt)("h2",d({},{id:"description"}),"Description"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tcp")," connector supports TCP or TLS connections. The loader reads blocks of\nbytes from the socket, and the saver writes them to the socket."),(0,o.kt)("p",null,"The loader defaults to creating a socket in listening mode. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"--connect")," if\nthe loader should initiate the connection instead. The saver defaults to\ncreating a socket in connect mode. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"--listen")," if the saver should instead\nlisten on a socket."),(0,o.kt)("p",null,"When you have a socket in listening mode, use ",(0,o.kt)("inlineCode",{parentName:"p"},"0.0.0.0")," to accept connections on\nall interfaces. Both saver and loader also have a ",(0,o.kt)("inlineCode",{parentName:"p"},"--listen-once")," option that\nwill stop the pipeline after the first connection terminated. The\n",(0,o.kt)("a",d({parentName:"p"},{href:"/v4.17/operators/nics"}),(0,o.kt)("inlineCode",{parentName:"a"},"nics"))," operator lists all all available interfaces."),(0,o.kt)("admonition",d({},{title:"One connection at at time",type:"caution"}),(0,o.kt)("p",{parentName:"admonition"},"A single pipeline can accept at most ",(0,o.kt)("em",{parentName:"p"},"one")," TCP connection at a time. If another\nclient attempts to connect to the same listening socket, it will time out. The\nreason for this behavior is that the downstream operator (typically a parser)\nmay exhibit undefined behavior if it receives data from multiple sockets.")),(0,o.kt)("h3",d({},{id:"endpoint"}),(0,o.kt)("inlineCode",{parentName:"h3"},"<endpoint>")),(0,o.kt)("p",null,"The address of the remote endpoint to connect to when using ",(0,o.kt)("inlineCode",{parentName:"p"},"--connect"),", and the\nbind address when using ",(0,o.kt)("inlineCode",{parentName:"p"},"--listen"),"."),(0,o.kt)("h3",d({},{id:"-c--connect-loader"}),(0,o.kt)("inlineCode",{parentName:"h3"},"-c,--connect")," (Loader)"),(0,o.kt)("p",null,"Connect to ",(0,o.kt)("inlineCode",{parentName:"p"},"<endpoint>")," instead of listening at it."),(0,o.kt)("h3",d({},{id:"-l--listen-saver"}),(0,o.kt)("inlineCode",{parentName:"h3"},"-l,--listen")," (Saver)"),(0,o.kt)("p",null,"Listen at ",(0,o.kt)("inlineCode",{parentName:"p"},"<endpoint>")," instead of connecting to it."),(0,o.kt)("h3",d({},{id:"-o--listen-once"}),(0,o.kt)("inlineCode",{parentName:"h3"},"-o,--listen-once")),(0,o.kt)("p",null,"When listening to a socket, only process a single connection instead of looping\nover all connecting clients forever."),(0,o.kt)("p",null,"Requires a loader or saver with ",(0,o.kt)("inlineCode",{parentName:"p"},"--listen"),"."),(0,o.kt)("h3",d({},{id:"--tls"}),(0,o.kt)("inlineCode",{parentName:"h3"},"--tls")),(0,o.kt)("p",null,"Wrap the connection into a TLS secured stream."),(0,o.kt)("h3",d({},{id:"--certfile"}),(0,o.kt)("inlineCode",{parentName:"h3"},"--certfile")),(0,o.kt)("p",null,"Path to a ",(0,o.kt)("inlineCode",{parentName:"p"},".pem")," file containing the TLS certificate for the server."),(0,o.kt)("p",null,"Ignored unless ",(0,o.kt)("inlineCode",{parentName:"p"},"--tls")," is also specified."),(0,o.kt)("h3",d({},{id:"--keyfile"}),(0,o.kt)("inlineCode",{parentName:"h3"},"--keyfile")),(0,o.kt)("p",null,"Path to a ",(0,o.kt)("inlineCode",{parentName:"p"},".pem")," file containing the private key for the certificate."),(0,o.kt)("p",null,"Ignored unless ",(0,o.kt)("inlineCode",{parentName:"p"},"--tls")," is also specified."),(0,o.kt)("h2",d({},{id:"examples"}),"Examples"),(0,o.kt)("p",null,"Read raw bytes by connecting to a TCP endpoint:"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{}),"load tcp://127.0.0.1:8000\n")),(0,o.kt)("p",null,"Test this locally by spinning up a local server with ",(0,o.kt)("inlineCode",{parentName:"p"},"socat"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"echo foo | socat TCP-LISTEN:8000 stdout\n")),(0,o.kt)("p",null,"Listen on localhost and wait for incoming TLS connections:"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{}),"load tcp://127.0.0.1:4000 --tls --certfile key_and_cert.pem --keyfile key_and_cert.pem -k\n")),(0,o.kt)("p",null,"The above example uses a self-signed certificate that can be generated like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"openssl req -x509 -newkey rsa:2048 -keyout key_and_cert.pem -out key_and_cert.pem -days 365 -nodes\n")),(0,o.kt)("p",null,"Test the endpoint locally by issuing a TLS connection:"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"openssl s_client 127.0.0.1:4000\n")))}N.isMDXComponent=!0}}]);