"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5029],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),m=a,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},25325:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const i={},o="AWS",s={unversionedId:"understand-vast/architecture/cloud/aws",id:"understand-vast/architecture/cloud/aws",title:"AWS",description:"Architecture Choices",source:"@site/docs/understand-vast/architecture/cloud/aws.md",sourceDirName:"understand-vast/architecture/cloud",slug:"/understand-vast/architecture/cloud/aws",permalink:"/docs/understand-vast/architecture/cloud/aws",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/understand-vast/architecture/cloud/aws.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Plugins",permalink:"/docs/understand-vast/architecture/plugins"},next:{title:"Type System",permalink:"/docs/understand-vast/data-model/type-system"}},c={},l=[{value:"Architecture Choices",id:"architecture-choices",level:2},{value:"VPC Infrastructure",id:"vpc-infrastructure",level:2},{value:"Images and Registries",id:"images-and-registries",level:2}],u={toc:l};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"aws"},"AWS"),(0,a.kt)("h2",{id:"architecture-choices"},"Architecture Choices"),(0,a.kt)("p",null,"The AWS architecture builds on serverless principles to deliver a scalable\ncloud-native deployment option. To combine continuously running services with\ndynamic ad-hoc tasks, we use Lambda and Fargate as building blocks for on-demand\nquery capacity while continuously ingesting data."),(0,a.kt)("p",null,"Specifically, we embed the long-running VAST server in a Fargate task\ndefinition, which allows for flexible resource allocation based on compute\nresource needs. VAST mounts EFS storage for maximum flexibility and\npay-as-you-go scaling. The VAST client performs short-running ad-hoc tasks, like\ningesting a file or running query. We map such actions to Lambda functions."),(0,a.kt)("h2",{id:"vpc-infrastructure"},"VPC Infrastructure"),(0,a.kt)("p",null,"The provided Terraform script creates the following architecture within a given\nVPC:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7913347/177141492-b99cce77-3c10-4740-bbdc-4fc2f43b8abc.png",alt:"VAST VPC Architecture"})),(0,a.kt)("p",null,"The assumption is that the VPC has an Internet Gateway attached. Given a CIDR\nblock within this VPC, Terraform creates two subnets:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"VAST Subnet"),": a private subnet where the VAST nodes and other security\ntools run."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Gateway Subnet"),": a public subnet to talk to other AWS services and the\nInternet")),(0,a.kt)("p",null,"To resolve the IP address of the VAST server and other appliances, we use AWS\nCloud Map as a service discovery provider."),(0,a.kt)("h2",{id:"images-and-registries"},"Images and Registries"),(0,a.kt)("p",null,"Both Lambda and Fargate deploy VAST as a Docker image. Fargate runs the official\n",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/tenzir/vast"},"tenzir/vast")," image. Lambda imposes two\nadditional requirements:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The image must contain the Lambda Runtime Interface"),(0,a.kt)("li",{parentName:"ol"},"ECR must host the image in the region where the Lambda is deployed")),(0,a.kt)("p",null,"For that reason, our toolchain builds a Lambda-specific image locally and pushes\nit to a private ECR repository."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53797/157065561-82cf8bc6-b314-4439-b66f-c8e3a93e431b.png",alt:"Docker\nworkflow"})))}d.isMDXComponent=!0}}]);