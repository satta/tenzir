"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[87092],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),s=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(p.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=o,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return t?n.createElement(f,i(i({ref:r},c),{},{components:t})):n.createElement(f,i({ref:r},c))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},21125:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>v,contentTitle:()=>y,default:()=>O,frontMatter:()=>f,metadata:()=>h,toc:()=>g});var n=t(3905),o=Object.defineProperty,a=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,c=(e,r,t)=>r in e?o(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,u=(e,r)=>{for(var t in r||(r={}))p.call(r,t)&&c(e,t,r[t]);if(l)for(var t of l(r))s.call(r,t)&&c(e,t,r[t]);return e},m=(e,r)=>a(e,i(r)),d=(e,r)=>{var t={};for(var n in e)p.call(e,n)&&r.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&l)for(var n of l(e))r.indexOf(n)<0&&s.call(e,n)&&(t[n]=e[n]);return t};const f={sidebar_position:5},y="Operator Modifiers",h={unversionedId:"language/operator-modifiers",id:"version-Tenzir v4.11/language/operator-modifiers",title:"Operator Modifiers",description:"Operator modifiers are keywords that may occur before an operator.",source:"@site/versioned_docs/version-Tenzir v4.11/language/operator-modifiers.md",sourceDirName:"language",slug:"/language/operator-modifiers",permalink:"/language/operator-modifiers",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-Tenzir v4.11/language/operator-modifiers.md",tags:[],version:"Tenzir v4.11",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"User-Defined Operators",permalink:"/language/user-defined-operators"},next:{title:"Operators",permalink:"/operators"}},v={},g=[{value:"Scheduled Executions",id:"scheduled-executions",level:2},{value:"Location Overrides",id:"location-overrides",level:2}],k={toc:g},b="wrapper";function O(e){var r=e,{components:t}=r,o=d(r,["components"]);return(0,n.kt)(b,m(u(u({},k),o),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",u({},{id:"operator-modifiers"}),"Operator Modifiers"),(0,n.kt)("p",null,"Operator modifiers are keywords that may occur before an operator."),(0,n.kt)("h2",u({},{id:"scheduled-executions"}),"Scheduled Executions"),(0,n.kt)("p",null,"The special keyword ",(0,n.kt)("inlineCode",{parentName:"p"},"every")," enables scheduled execution of a source operator."),(0,n.kt)("p",null,"Use the operator modifier like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{}),"every <interval> <operator> [<args...>]\n")),(0,n.kt)("p",null,"For example, ",(0,n.kt)("inlineCode",{parentName:"p"},"version")," prints the version number exactly once, but ",(0,n.kt)("inlineCode",{parentName:"p"},"every 1s\nversion")," prints the version number once every second."),(0,n.kt)("h2",u({},{id:"location-overrides"}),"Location Overrides"),(0,n.kt)("p",null,"Pipelines run across multiple processes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The local ",(0,n.kt)("inlineCode",{parentName:"li"},"tenzir")," process, and"),(0,n.kt)("li",{parentName:"ul"},"the remote ",(0,n.kt)("inlineCode",{parentName:"li"},"tenzir-node")," processes (commonly referred to as ",(0,n.kt)("em",{parentName:"li"},"nodes"),").")),(0,n.kt)("p",null,"Some pipeline operators prefer running either local or remote. For example, the\n",(0,n.kt)("inlineCode",{parentName:"p"},"from")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"to")," operators run locally, and the ",(0,n.kt)("inlineCode",{parentName:"p"},"serve")," operator runs remotely by\ndefault. Operators that do not have a preferred location use the location of the\nprevious operator."),(0,n.kt)("p",null,"The special keywords ",(0,n.kt)("inlineCode",{parentName:"p"},"local")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"remote")," allow for specifying the location of\nan operator explicitly. They may occur before any operator. For example, the\npipeline ",(0,n.kt)("inlineCode",{parentName:"p"},"read json | remote pass | write json")," reads JSON from stdin locally,\ntransfers it to a remote node to do nothing with the data, and\nthen transfers it back to write JSON to stdout locally."),(0,n.kt)("p",null,"Use the operator modifier like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{}),"local  <operator> [<args...>]\nremote <operator> [<args...>]\n")),(0,n.kt)("p",null,"There are generally two scenarios in which you may want to use location\noverrides:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Move compute-heavy operators to a separate machine: Operators like\n",(0,n.kt)("inlineCode",{parentName:"p"},"summarize")," may require a lot of resources. When collecting events from an\nedge node, you may want to instead use ",(0,n.kt)("inlineCode",{parentName:"p"},"remote summarize")," to run the\ncomputation on the compute-heavy machine.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Change local operators to run remotely, to allow for reading a file from a\nremote host, e,g., ",(0,n.kt)("inlineCode",{parentName:"p"},"remote from file /tmp/suricata.sock read suricata"),".\nBecause such an operation allows for remotely reading files or executing\npotentially unwanted operators, you can disable such overrides by setting the\nfollowing configuration option:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",u({parentName:"pre"},{className:"language-yaml",metastring:'{0} title="tenzir.yaml"',"{0}":!0,title:'"tenzir.yaml"'}),"tenzir:\n  no-location-overrides: true\n")),(0,n.kt)("p",{parentName:"li"},"If you want more fine-grained control about which operators, operator\nmodifiers, formats, and connectors are available, you can selectively disable\nthem in the configuration:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",u({parentName:"pre"},{className:"language-yaml",metastring:'{0} title="tenzir.yaml"',"{0}":!0,title:'"tenzir.yaml"'}),"tenzir:\n  disable-plugins:\n    - shell\n    - remote\n")))))}O.isMDXComponent=!0}}]);