"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6814],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},92458:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={"sidebar-position":2},i="Taxonomies",s={unversionedId:"understand-vast/data-model/taxonomies",id:"understand-vast/data-model/taxonomies",title:"Taxonomies",description:"Event taxonomies address the uphill battle of data normalization.",source:"@site/docs/understand-vast/data-model/taxonomies.md",sourceDirName:"understand-vast/data-model",slug:"/understand-vast/data-model/taxonomies",permalink:"/docs/understand-vast/data-model/taxonomies",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/understand-vast/data-model/taxonomies.md",tags:[],version:"current",frontMatter:{"sidebar-position":2},sidebar:"docsSidebar",previous:{title:"Modules",permalink:"/docs/understand-vast/data-model/modules"},next:{title:"Query Language",permalink:"/docs/understand-vast/query-language/"}},l={},c=[{value:"Concepts",id:"concepts",level:2},{value:"Models",id:"models",level:2}],p={toc:c};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"taxonomies"},"Taxonomies"),(0,o.kt)("p",null,"Event taxonomies address the ",(0,o.kt)("a",{parentName:"p",href:"https://medium.com/anton-on-security/security-correlation-then-and-now-a-sad-truth-about-siem-fc5a1afb1001"},"uphill battle"),' of data normalization.\nThey enable you to interact with different data formats with a unified access\nlayer, instead of having to juggle the various naming schemes and\nrepresentations of each individual data source. Today, every SIEM has its own\n"unified" approach to represent data, e.g.,\nelastic\'s ',(0,o.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/ecs/current/ecs-reference.html"},"ECS"),",\nsplunk's ",(0,o.kt)("a",{parentName:"p",href:"https://docs.splunk.com/Splexicon:CommonInformationModel"},"CIM"),",\nQRadar's ",(0,o.kt)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/dsm?topic=leef-overview:"},"LEEF"),",\nSentinel's ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/sentinel/normalization"},"ASIM"),",\nChronicle's ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/chronicle/docs/unified-data-model/udm-usage"},"UDM"),",\nPanther's ",(0,o.kt)("a",{parentName:"p",href:"https://docs.panther.com/writing-detections/data-models"},"UDM"),". There exist also some vendor-agnostic attempts,\nsuch as MITRE's ",(0,o.kt)("a",{parentName:"p",href:"https://cee.mitre.org/"},"CEE"),", OSSEM's ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/OTRF/OSSEM-CDM"},"CDM"),", or STIX ",(0,o.kt)("a",{parentName:"p",href:"https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_mlbmudhl16lr"},"SCOs"),"."),(0,o.kt)("p",null,"We could add ",(0,o.kt)("a",{parentName:"p",href:"https://xkcd.com/927/"},"yet another data model"),", but our goal is\nthat you pick one that you know already or like best. Ultimately, we envision a\nthriving community around taxonomization that keeps data sources and semantics\nin a productive state. Until this community exists, we aim to shape the\nappropriate building blocks for creating sustainable taxonomies. In VAST, there\nexist two mechanisms for this purpose:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#concepts"},"Concept"),": a field mapping/alias that lazily resolves at query time"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#models"},"Model"),": a set of concepts that in sum describe a specific entity")),(0,o.kt)("p",null,"Concepts and models are not embedded in the schema and can therefore evolve\nindependently from the data typing. This behavior is different from other\nsystems that normalize by ",(0,o.kt)("em",{parentName:"p"},"rewriting")," the data on ingest, e.g., elastic with\n",(0,o.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/ecs/current/ecs-reference.html"},"ECS"),". We do not advocate for this approach, because it has the following\ndrawbacks:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Data Lock-in"),": if you want to use a different data model tomorrow, you\nwould have to rewrite all your past data, which can be infeasible in some\ncases."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Compliance Problems"),": if you need an exact representation of your original\ndata shape, you cannot perform an irreversible transformation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Limited Analytics"),": if you want to run a tool that relies on the original\nschema of the data, it will not work.")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"type-system"},"Type aliases")," and concepts are two different mechanisms to add\nsemantics to the data. The following table highlights the differences between\nthe two mechanisms:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Aliases"),(0,o.kt)("th",{parentName:"tr",align:null},"Concepts"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Objective"),(0,o.kt)("td",{parentName:"tr",align:null},"Tune data representation"),(0,o.kt)("td",{parentName:"tr",align:null},"Model a domain")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"User"),(0,o.kt)("td",{parentName:"tr",align:null},"Schema writer"),(0,o.kt)("td",{parentName:"tr",align:null},"Query writer")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Typing"),(0,o.kt)("td",{parentName:"tr",align:null},"Strong"),(0,o.kt)("td",{parentName:"tr",align:null},"Lazy")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Location"),(0,o.kt)("td",{parentName:"tr",align:null},"Embedded in data"),(0,o.kt)("td",{parentName:"tr",align:null},"Defined outside of data")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Modification"),(0,o.kt)("td",{parentName:"tr",align:null},"Only for new data"),(0,o.kt)("td",{parentName:"tr",align:null},"For past and new data")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Structure"),(0,o.kt)("td",{parentName:"tr",align:null},"Type hierarchy"),(0,o.kt)("td",{parentName:"tr",align:null},"Tag-like collection")))),(0,o.kt)("admonition",{title:"The Imperfection of Data Models",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Creating a unified data model is conceptually The Right Thing, but prior to\nembarking on a long journey, we have to appreciate that it will always remain an\nimperfect approximation in practice, for the following reasons:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Incompleteness"),": we have to appreciate that all data models are incomplete\nbecause data sources continuously evolve."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Incorrectness"),": in addition to lacking information, data models contain\na growing number of errors, for the same evolutionary reasons as above."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variance"),": data models vary substantially between products, making it\ndifficult to mix-and-match semantics."))),(0,o.kt)("h2",{id:"concepts"},"Concepts"),(0,o.kt)("p",null,"A ",(0,o.kt)("em",{parentName:"p"},"concept")," is a set of ",(0,o.kt)("a",{parentName:"p",href:"/docs/understand-vast/query-language/expressions#extractors"},"extractors")," to enable more semantic\nquerying. VAST translates a query expression containing a concept to a\ndisjunction of all extractors."),(0,o.kt)("p",null,"For example, Consider Sysmon and Suricata events, each of which have a notion of\na network connection with a source IP address. The Sysmon event\n",(0,o.kt)("inlineCode",{parentName:"p"},"NetworkConnection")," contains a field ",(0,o.kt)("inlineCode",{parentName:"p"},"SourceIp")," and the Suricata event ",(0,o.kt)("inlineCode",{parentName:"p"},"flow"),"\ncontains a field ",(0,o.kt)("inlineCode",{parentName:"p"},"src_ip")," for this purpose. Without concepts, querying for a\nspecific value would involve writing a disjunction of two predicates:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"suricata.flow.src_ip == 6.6.6.6 || sysmon.NetworkConnection.SourceIp == 6.6.6.6\n")),(0,o.kt)("p",null,"With concepts, you can write this as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"source_ip == 6.6.6.6\n")),(0,o.kt)("p",null,'Concepts decouple semantics from syntax and allow you to write queries that\n"scale" independent of the number of data sources. No one wants to remember\nall format-specific names, aside from being an error-prone practice.'),(0,o.kt)("p",null,"You can define a concept in a ",(0,o.kt)("a",{parentName:"p",href:"modules"},"module")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"concepts:\n  source_ip:\n    description: the originator of a network-layer connection\n    fields:\n    - sysmon.NetworkConnection.SourceIp\n    - suricata.flow.src_ip\n")),(0,o.kt)("p",null,"Concepts compose. A concept can include other concepts to represent semantic\nhierarchies. For example, consider our above ",(0,o.kt)("inlineCode",{parentName:"p"},"source_ip")," concept. If we want to\ngeneralize this concept to also include MAC addresses, we could define a concept\n",(0,o.kt)("inlineCode",{parentName:"p"},"source")," that includes both ",(0,o.kt)("inlineCode",{parentName:"p"},"source_ip")," and a new field that represents a MAC\naddress:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Concept Composition",src:n(13481).Z+"#gh-light-mode-only",width:"1640",height:"300"}),"\n",(0,o.kt)("img",{alt:"Concept Composition",src:n(88551).Z+"#gh-dark-mode-only",width:"1640",height:"300"})),(0,o.kt)("p",null,"You define the composite concept in a module as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"concepts:\n  source_ip:\n    description: the originator of a connection\n    fields:\n    - zeek.conn.id.orig_l2_addr\n    concepts:\n    - source_ip\n")),(0,o.kt)("p",null,"You can add new mappings to an existing concept in every module. For example,\nwhen adding a new data source that contains an event with a source IP address\nfield, you can define the concept in the corresponding module."),(0,o.kt)("h2",{id:"models"},"Models"),(0,o.kt)("p",null,"A ",(0,o.kt)("em",{parentName:"p"},"model")," is made of one or more concepts. An event fulfills a model\nif and only if it fulfills all contained concepts."),(0,o.kt)("p",null,"Consider again Sysmon and Suricata data for formalizing the notion of a\n",(0,o.kt)("inlineCode",{parentName:"p"},"connection")," that requires the following concepts to be fulfilled: ",(0,o.kt)("inlineCode",{parentName:"p"},"source_ip"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"source_port"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"dest_ip"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"dest_port"),". Both ",(0,o.kt)("inlineCode",{parentName:"p"},"sysmon.NetworkConnection")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"suricata.flow")," fulfil all concepts of the model ",(0,o.kt)("inlineCode",{parentName:"p"},"connection"),". The model\ndefinition looks as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"models:\n  connection:\n    description: a network connection 4-tuple\n    definition:\n    - source_ip\n    - source_port\n    - destination_ip\n    - destination_port\n")),(0,o.kt)("p",null,"Models compose like concepts: you can define a new model out of existing models\nor out of a mix of concepts and models. However, a concept cannot include a\nmodel."),(0,o.kt)("p",null,"In the above example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"connection")," model consists of the ",(0,o.kt)("inlineCode",{parentName:"p"},"source_endpoint"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"destination_endpoint")," model, each of which contains two concepts:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Model Composition",src:n(72921).Z+"#gh-light-mode-only",width:"1400",height:"640"}),"\n",(0,o.kt)("img",{alt:"Model Composition",src:n(15613).Z+"#gh-dark-mode-only",width:"1400",height:"640"})),(0,o.kt)("p",null,"You can query a model by providing a record literal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"connection = <_, _, 10.0.0.1, 80>\n")),(0,o.kt)("p",null,"The query expression resolution begins with models, continues with concepts, and\nterminates when the query consists of extractors only. For example, consider the\nmodel query ",(0,o.kt)("inlineCode",{parentName:"p"},"destination_endpoint = <10.0.0.1, 80>")," where the left-hand side\nbeing the name of a model and the right-hand side a record value. VAST resolves\nthis query into a conjunction first:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"destination_ip == 10.0.0.1 && destination_port == 80\n")),(0,o.kt)("p",null,"Thereafter, the concept resolution takes place again, assuming that there exist\nconcept definitions for ",(0,o.kt)("inlineCode",{parentName:"p"},"destination_port")," symmetric to ",(0,o.kt)("inlineCode",{parentName:"p"},"destination_ip"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"(sysmon.NetworkConnection.RemoteIp == 10.0.0.1\n  || suricata.flow.dest_ip == 10.0.0.1\n  || zeek.conn.id.resp_h == 10.0.0.1)\n&&\n(sysmon.NetworkConnection.RemotePort == 80\n  || suricata.flow.dest_port == 80\n  || zeek.conn.id.resp_p == 80)\n")),(0,o.kt)("p",null,"The resolution into conjunctions and disjunctions nicely illustrates the\nduality of models as product types and concepts as sum types."))}d.isMDXComponent=!0},88551:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/concept-composition.dark-55a0ce0d0a4d2fc75311f5892e55122b.png"},13481:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/concept-composition.light-b5045b9c838811a84286744f77e951c1.png"},15613:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/model-composition.dark-a6bf88a326e3bf886e048fd0dc018c86.png"},72921:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/model-composition.light-837370ad9492933ca433f02fa7d2be25.png"}}]);