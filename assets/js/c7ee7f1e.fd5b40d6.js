"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[20477],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=c(n),f=o,h=s["".concat(p,".").concat(f)]||s[f]||u[f]||i;return n?r.createElement(h,a(a({ref:t},d),{},{components:n})):r.createElement(h,a({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},35468:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>m,default:()=>g,frontMatter:()=>h,metadata:()=>v,toc:()=>y});var r=n(3905),o=Object.defineProperty,i=Object.defineProperties,a=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,s=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&d(e,n,t[n]);if(l)for(var n of l(t))c.call(t,n)&&d(e,n,t[n]);return e},u=(e,t)=>i(e,a(t)),f=(e,t)=>{var n={};for(var r in e)p.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&c.call(e,r)&&(n[r]=e[r]);return n};const h={sidebar_custom_props:{operator:{transformation:!0}}},m="enrich",v={unversionedId:"operators/enrich",id:"operators/enrich",title:"enrich",description:"Enriches events with a context.",source:"@site/docs/operators/enrich.md",sourceDirName:"operators",slug:"/operators/enrich",permalink:"/next/operators/enrich",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/docs/operators/enrich.md",tags:[],version:"current",frontMatter:{sidebar_custom_props:{operator:{transformation:!0}}},sidebar:"docsSidebar",previous:{title:"drop",permalink:"/next/operators/drop"},next:{title:"enumerate",permalink:"/next/operators/enumerate"}},k={},y=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"<code>&lt;name&gt;</code>",id:"name",level:3},{value:"<code>&lt;output&gt;</code>",id:"output",level:3},{value:"<code>--field &lt;field...&gt;</code>",id:"--field-field",level:3},{value:"<code>--replace</code>",id:"--replace",level:3},{value:"<code>--filter</code>",id:"--filter",level:3},{value:"<code>--separate</code>",id:"--separate",level:3},{value:"<code>--yield &lt;path&gt;</code>",id:"--yield-path",level:3},{value:"<code>&lt;context-options&gt;</code>",id:"context-options",level:3},{value:"Examples",id:"examples",level:2}],x={toc:y},b="wrapper";function g(e){var t=e,{components:n}=t,o=f(t,["components"]);return(0,r.kt)(b,u(s(s({},x),o),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",s({},{id:"enrich"}),"enrich"),(0,r.kt)("p",null,"Enriches events with a context."),(0,r.kt)("h2",s({},{id:"synopsis"}),"Synopsis"),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{}),"enrich <name>          [--field <field...>] [--replace] [--filter] [--separate]\n                       [--yield <field>] [<context-options>]\nenrich <output>=<name> [--field <field...>] [--filter] [--separate]\n                       [--yield <field>] [<context-options>]\n")),(0,r.kt)("h2",s({},{id:"description"}),"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"enrich")," operator applies a context, extending input events with a new field\ndefined by the context."),(0,r.kt)("h3",s({},{id:"name"}),(0,r.kt)("inlineCode",{parentName:"h3"},"<name>")),(0,r.kt)("p",null,"The name of the context to enrich with."),(0,r.kt)("h3",s({},{id:"output"}),(0,r.kt)("inlineCode",{parentName:"h3"},"<output>")),(0,r.kt)("p",null,"The name of the field in which to store the context's enrichment. Defaults to\nthe name of the context."),(0,r.kt)("h3",s({},{id:"--field-field"}),(0,r.kt)("inlineCode",{parentName:"h3"},"--field <field...>")),(0,r.kt)("p",null,"A comma-separated list of fields, type extractors, or concepts to match."),(0,r.kt)("h3",s({},{id:"--replace"}),(0,r.kt)("inlineCode",{parentName:"h3"},"--replace")),(0,r.kt)("p",null,"Replace the given fields with their respective context, omitting all\nmeta-information."),(0,r.kt)("h3",s({},{id:"--filter"}),(0,r.kt)("inlineCode",{parentName:"h3"},"--filter")),(0,r.kt)("p",null,"Filter events that do not match the context."),(0,r.kt)("p",null,"This option is incompatible with ",(0,r.kt)("inlineCode",{parentName:"p"},"--replace"),"."),(0,r.kt)("h3",s({},{id:"--separate"}),(0,r.kt)("inlineCode",{parentName:"h3"},"--separate")),(0,r.kt)("p",null,"When multiple fields are provided, e.g., when using ",(0,r.kt)("inlineCode",{parentName:"p"},"--field :ip")," to enrich all\nIP address fields, duplicate the event for every provided field and enrich them\nindividually."),(0,r.kt)("p",null,"When using the option, the context moves from ",(0,r.kt)("inlineCode",{parentName:"p"},"<output>.context.<path...>")," to\n",(0,r.kt)("inlineCode",{parentName:"p"},"<output>")," in the resulting event, with a new field ",(0,r.kt)("inlineCode",{parentName:"p"},"<output>.path")," containing\nthe enriched path."),(0,r.kt)("h3",s({},{id:"--yield-path"}),(0,r.kt)("inlineCode",{parentName:"h3"},"--yield <path>")),(0,r.kt)("p",null,"Provide a field into the context object to use as the context instead. If the\nkey does not exist within the context, a ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," value is used instead."),(0,r.kt)("h3",s({},{id:"context-options"}),(0,r.kt)("inlineCode",{parentName:"h3"},"<context-options>")),(0,r.kt)("p",null,"Optional, context-specific options in the format ",(0,r.kt)("inlineCode",{parentName:"p"},"--key value")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"--flag"),".\nRefer to the documentation of the individual contexts for these."),(0,r.kt)("h2",s({},{id:"examples"}),"Examples"),(0,r.kt)("p",null,"Apply the ",(0,r.kt)("inlineCode",{parentName:"p"},"lookup-table")," context ",(0,r.kt)("inlineCode",{parentName:"p"},"feodo")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"suricata.flow")," events, using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"dest_ip")," field as the field to compare the context key against."),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{}),'export\n| where #schema == "suricata.flow"\n| enrich feodo --field dest_ip\n')),(0,r.kt)("p",null,"To return only events that have a context, use:"),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{}),'export\n| where #schema == "suricata.flow"\n| enrich feodo --field dest_ip --filter\n')))}g.isMDXComponent=!0}}]);